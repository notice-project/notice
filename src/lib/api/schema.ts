/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/": {
    /**
     * Ping
     * @description Check if the server is running.
     */
    get: operations["ping__get"];
  };
  "/audio/{filename}": {
    /** Get Audio */
    get: operations["get_audio_audio__filename__get"];
  };
  "/bookshelves/": {
    /** Get Bookshelves */
    get: operations["get_bookshelves_bookshelves__get"];
    /** Create Bookshelf */
    post: operations["create_bookshelf_bookshelves__post"];
  };
  "/bookshelves/{bookshelf_id}": {
    /** Delete Bookshelf */
    delete: operations["delete_bookshelf_bookshelves__bookshelf_id__delete"];
    /** Update Bookshelf */
    patch: operations["update_bookshelf_bookshelves__bookshelf_id__patch"];
  };
  "/bookshelves/{bookshelf_id}/notes/": {
    /** Get Notes */
    get: operations["get_notes_bookshelves__bookshelf_id__notes__get"];
    /** Create Note */
    post: operations["create_note_bookshelves__bookshelf_id__notes__post"];
  };
  "/bookshelves/{bookshelf_id}/notes/{note_id}": {
    /** Delete Note */
    delete: operations["delete_note_bookshelves__bookshelf_id__notes__note_id__delete"];
    /** Update Note */
    patch: operations["update_note_bookshelves__bookshelf_id__notes__note_id__patch"];
  };
  "/transcription": {
    /** Live Transcription Page */
    get: operations["live_transcription_page_transcription_get"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /**
     * BookshelfCreate
     * @description Model for creating a bookshelf.
     */
    BookshelfCreate: {
      /** Title */
      title: string;
    };
    /**
     * BookshelfRead
     * @description Model for reading a bookshelf.
     */
    BookshelfRead: {
      /** Count */
      count: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
    };
    /**
     * BookshelfUpdate
     * @description Model for updating a bookshelf.
     */
    BookshelfUpdate: {
      /** Title */
      title?: string | null;
    };
    /** CreateBookshelfResponse */
    CreateBookshelfResponse: {
      data: components["schemas"]["BookshelfRead"];
    };
    /** GetBookshelvesResponse */
    GetBookshelvesResponse: {
      /** Data */
      data: components["schemas"]["BookshelfRead"][];
      /** Next Cursor */
      next_cursor?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * NoteCreate
     * @description Model for creating a note.
     */
    NoteCreate: {
      /** Title */
      title: string;
    };
    /**
     * PingResponse
     * @description Response model for the ping endpoint.
     */
    PingResponse: {
      /**
       * Message
       * @default Server is running ðŸŽ‰
       */
      message?: string;
    };
    /** UpdateBookshelfResponse */
    UpdateBookshelfResponse: {
      data: components["schemas"]["BookshelfRead"];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Ping
   * @description Check if the server is running.
   */
  ping__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PingResponse"];
        };
      };
    };
  };
  /** Get Audio */
  get_audio_audio__filename__get: {
    parameters: {
      path: {
        /** @description The filename of the audio file */
        filename: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Bookshelves */
  get_bookshelves_bookshelves__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        limit?: number;
        order?: "asc" | "desc";
        sort?: "title" | "created_at";
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GetBookshelvesResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Bookshelf */
  create_bookshelf_bookshelves__post: {
    parameters: {
      cookie: {
        "authjs.session-token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookshelfCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateBookshelfResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Bookshelf */
  delete_bookshelf_bookshelves__bookshelf_id__delete: {
    parameters: {
      path: {
        bookshelf_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Bookshelf */
  update_bookshelf_bookshelves__bookshelf_id__patch: {
    parameters: {
      path: {
        bookshelf_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookshelfUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateBookshelfResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Notes */
  get_notes_bookshelves__bookshelf_id__notes__get: {
    parameters: {
      query?: {
        cursor?: string | null;
        limit?: number;
        order?: "asc" | "desc";
        sort?: "title" | "created_at";
      };
      path: {
        bookshelf_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Note */
  create_note_bookshelves__bookshelf_id__notes__post: {
    parameters: {
      path: {
        bookshelf_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Note */
  delete_note_bookshelves__bookshelf_id__notes__note_id__delete: {
    parameters: {
      path: {
        bookshelf_id: string;
        note_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Note */
  update_note_bookshelves__bookshelf_id__notes__note_id__patch: {
    parameters: {
      path: {
        bookshelf_id: string;
        note_id: string;
      };
      cookie: {
        "authjs.session-token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Live Transcription Page */
  live_transcription_page_transcription_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
};
